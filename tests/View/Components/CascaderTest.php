<?php

namespace LaravelFormItem\Tests\View\Components;

use LaravelFormItem\Tests\TestCase;
use LaravelFormItem\View\Components\Cascader;
use ReflectionMethod;

class CascaderTest extends TestCase
{
    public function tearDown(): void
    {
        \Mockery::close();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testConstructOptionException()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->andReturn('rand_id');

        $this->expectExceptionMessage('options and resource can not be empty at the same time.');
        $cascader->__construct(
            'bar_name',
        );
    }

    public function testConstructName()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->once()
            ->andReturn('rand_id');
        $options = [
            'test_option',
        ];
        $re_options = [
            'test_option_re',
        ];
        $cascader->shouldReceive('formateCascaderOptions')
            ->once()
            ->with($options)
            ->andReturn($re_options);

        $cascader->__construct(
            'bar_name',
            null,
            null,
            $options
        );

        $this->assertEquals($cascader->name, 'bar_name');
        $this->assertNull($cascader->value);
        $this->assertEquals($cascader->id, 'rand_id');
        $this->assertEquals($cascader->options, $re_options);
        $this->assertEquals($cascader->type, '');
        $this->assertEquals($cascader->append_el_prop, '');
    }

    public function testCheckResource()
    {
        $options = [
            [
                'text'      => 'foo_text',
                'value'     => 'foo_value',
                'children'  => [],
            ],
        ];

        $fixture = new Cascader(
            'bar_name',
            null,
            null,
            $options,
        );
        $reflector = new ReflectionMethod(Cascader::class, 'checkResource');
        $checkResource = $reflector->getClosure($fixture);
        $result = call_user_func_array($checkResource, [
            '',
        ]);
        $this->assertEquals($result, true);

        $this->expectExceptionMessage('resource must be have "__pid__" string.');
        call_user_func_array($checkResource, [
            'test_url',
        ]);
    }

    public function testRender()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();

        $response = $cascader->render();

        $this->assertEquals($response->name(), 'input::cascader');
    }

    public function testResource()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->once()
            ->andReturn('rand_id');
        $cascader->shouldReceive('formateCascaderOptions')
            ->once()
            ->with([])
            ->andReturn([]);

        $cascader->shouldReceive('checkResource')
            ->once()
            ->with('demo_url')
            ->andReturnTrue();

        $cascader->__construct(
            'bar_name',
            null,
            null,
            [],
            'demo_url'
        );

        $this->assertEquals($cascader->resource, 'demo_url');
    }

    public function testTrigger()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->once()
            ->andReturn('rand_id');
        $cascader->shouldReceive('formateCascaderOptions')
            ->once()
            ->with([])
            ->andReturn([]);

        $cascader->shouldReceive('checkResource')
            ->once()
            ->with('demo_url')
            ->andReturnTrue();

        $cascader->__construct(
            'bar_name',
            null,
            null,
            [],
            'demo_url',
            'demo_trigger',
        );

        $this->assertEquals($cascader->append_el_prop, '');
        $this->assertEquals($cascader->trigger, 'demo_trigger');
    }

    public function testClearable()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->once()
            ->andReturn('rand_id');
        $cascader->shouldReceive('formateCascaderOptions')
            ->once()
            ->with([])
            ->andReturn([]);

        $cascader->shouldReceive('checkResource')
            ->once()
            ->with('demo_url')
            ->andReturnTrue();

        $cascader->__construct(
            'bar_name',
            null,
            null,
            [],
            'demo_url',
            '',
            true
        );

        $this->assertEquals($cascader->append_el_prop, ' clearable');
    }

    public function testElProp()
    {
        $cascader = $this->mock(Cascader::class)
            ->makePartial()
            ->shouldAllowMockingProtectedMethods();
        $cascader->shouldReceive('defaultId')
            ->withNoArgs()
            ->once()
            ->andReturn('rand_id');
        $cascader->shouldReceive('formateCascaderOptions')
            ->once()
            ->with([])
            ->andReturn([]);

        $cascader->shouldReceive('checkResource')
            ->once()
            ->with('demo_url')
            ->andReturnTrue();

        $cascader->__construct(
            'bar_name',
            null,
            null,
            [],
            'demo_url',
            '',
            false,
            'demo_prop'
        );

        $this->assertEquals($cascader->append_el_prop, ' demo_prop');
    }
}
